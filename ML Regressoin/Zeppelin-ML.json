{"paragraphs":[{"text":"import scala.io.Source\nimport org.apache.spark.{SparkConf, SparkContext}\nimport org.apache.spark.SparkContext._\nimport org.apache.spark.rdd.RDD\nimport org.apache.spark.mllib.regression.LabeledPoint\nimport org.apache.spark.mllib.linalg.Vectors\nimport org.apache.spark.mllib.stat.{MultivariateStatisticalSummary, Statistics}\nimport org.apache.spark.mllib.feature.{StandardScaler,Normalizer,ChiSqSelector}\nimport org.apache.spark.mllib.evaluation.{MulticlassMetrics, BinaryClassificationMetrics}\nimport org.apache.spark.sql.{Row, SQLContext}\nimport sqlContext.implicits._\nimport org.apache.spark.rdd.PairRDDFunctions\nimport org.apache.spark.mllib.linalg.Matrix\nimport org.apache.spark.mllib.linalg.distributed.RowMatrix\nimport org.apache.spark.mllib.linalg.SingularValueDecomposition\nimport org.apache.spark.rdd.RDD\nimport org.apache.spark.sql.types.StringType\nimport org.apache.spark.sql.{SQLContext, DataFrame}\nimport org.apache.spark.mllib.regression.LabeledPoint\nimport org.apache.spark.mllib.feature.PCA\nimport org.apache.spark.mllib.regression.LinearRegressionModel\nimport org.apache.spark.mllib.optimization.{L1Updater,SquaredL2Updater}\nimport org.apache.spark.mllib.regression.{LinearRegressionWithSGD,RidgeRegressionWithSGD,LassoWithSGD}\nimport org.apache.spark.mllib.evaluation.RegressionMetrics\nimport org.apache.commons.math3.distribution.ChiSquaredDistribution\nimport org.apache.commons.math3.distribution.MultivariateNormalDistribution\nimport org.apache.commons.math3.random.MersenneTwister\nimport org.apache.commons.math3.stat.correlation.Covariance\nimport scala.util","dateUpdated":"Apr 17, 2016 7:10:34 PM","config":{"colWidth":12,"graph":{"mode":"table","height":300,"optionOpen":false,"keys":[],"values":[],"groups":[],"scatter":{}},"enabled":true,"editorMode":"ace/mode/scala"},"settings":{"params":{},"forms":{}},"jobName":"paragraph_1460836519825_-89142792","id":"20160416-155519_1124401417","result":{"code":"SUCCESS","type":"TEXT","msg":"import scala.io.Source\nimport org.apache.spark.{SparkConf, SparkContext}\nimport org.apache.spark.SparkContext._\nimport org.apache.spark.rdd.RDD\nimport org.apache.spark.mllib.regression.LabeledPoint\nimport org.apache.spark.mllib.linalg.Vectors\nimport org.apache.spark.mllib.stat.{MultivariateStatisticalSummary, Statistics}\nimport org.apache.spark.mllib.feature.{StandardScaler, Normalizer, ChiSqSelector}\nimport org.apache.spark.mllib.evaluation.{MulticlassMetrics, BinaryClassificationMetrics}\nimport org.apache.spark.sql.{Row, SQLContext}\nimport sqlContext.implicits._\nimport org.apache.spark.rdd.PairRDDFunctions\nimport org.apache.spark.mllib.linalg.Matrix\nimport org.apache.spark.mllib.linalg.distributed.RowMatrix\nimport org.apache.spark.mllib.linalg.SingularValueDecomposition\nimport org.apache.spark.rdd.RDD\nimport org.apache.spark.sql.types.StringType\nimport org.apache.spark.sql.{SQLContext, DataFrame}\nimport org.apache.spark.mllib.regression.LabeledPoint\nimport org.apache.spark.mllib.feature.PCA\nimport org.apache.spark.mllib.regression.LinearRegressionModel\nimport org.apache.spark.mllib.optimization.{L1Updater, SquaredL2Updater}\nimport org.apache.spark.mllib.regression.{LinearRegressionWithSGD, RidgeRegressionWithSGD, LassoWithSGD}\nimport org.apache.spark.mllib.evaluation.RegressionMetrics\nimport org.apache.commons.math3.distribution.ChiSquaredDistribution\nimport org.apache.commons.math3.distribution.MultivariateNormalDistribution\nimport org.apache.commons.math3.random.MersenneTwister\nimport org.apache.commons.math3.stat.correlation.Covariance\nimport scala.util\n"},"dateCreated":"Apr 16, 2016 3:55:19 PM","dateStarted":"Apr 17, 2016 7:10:34 PM","dateFinished":"Apr 17, 2016 7:10:39 PM","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:19"},{"text":"val inputFileValue = z.input(\"File Name\")","dateUpdated":"Apr 17, 2016 7:54:09 PM","config":{"colWidth":12,"graph":{"mode":"table","height":300,"optionOpen":false,"keys":[],"values":[],"groups":[],"scatter":{}},"enabled":true,"editorMode":"ace/mode/scala"},"settings":{"params":{"File Name":"/Users/rachanrhegde/BigData_FinalProject/S3/S3_data/out/part-00000"},"forms":{"File Name":{"name":"File Name","displayName":"File Name","defaultValue":"","hidden":false}}},"jobName":"paragraph_1460937120836_-457537793","id":"20160417-195200_1868182264","result":{"code":"SUCCESS","type":"TEXT","msg":"inputFileValue: Object = /Users/rachanrhegde/BigData_FinalProject/S3/S3_data/out/part-00000\n"},"dateCreated":"Apr 17, 2016 7:52:00 PM","dateStarted":"Apr 17, 2016 7:54:09 PM","dateFinished":"Apr 17, 2016 7:54:10 PM","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:20"},{"text":"val data = sc.textFile(inputFileValue.toString)","dateUpdated":"Apr 17, 2016 7:53:38 PM","config":{"colWidth":12,"graph":{"mode":"table","height":300,"optionOpen":false,"keys":[],"values":[],"groups":[],"scatter":{}},"enabled":true,"editorMode":"ace/mode/scala"},"settings":{"params":{},"forms":{}},"jobName":"paragraph_1460836565992_924948040","id":"20160416-155605_902951493","result":{"code":"SUCCESS","type":"TEXT","msg":"data: org.apache.spark.rdd.RDD[String] = MapPartitionsRDD[4345] at textFile at <console>:221\n"},"dateCreated":"Apr 16, 2016 3:56:05 PM","dateStarted":"Apr 17, 2016 7:53:38 PM","dateFinished":"Apr 17, 2016 7:53:39 PM","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:21"},{"text":"//data.collect()","dateUpdated":"Apr 16, 2016 5:32:08 PM","config":{"colWidth":12,"graph":{"mode":"table","height":300,"optionOpen":false,"keys":[],"values":[],"groups":[],"scatter":{}},"enabled":true,"editorMode":"ace/mode/scala"},"settings":{"params":{},"forms":{}},"jobName":"paragraph_1460841129094_612844397","id":"20160416-171209_1292273549","result":{"code":"SUCCESS","type":"TEXT","msg":"res66: Array[String] = Array(AKM1MP6P0OYPR-0132793040 Dic|29 WC|40 achieve|0 adverb|2 affect|2 anger|0 anx|0 article|2 assent|0 auxverb|2 bio|0 body|0 cause|0 certain|1 cogmech|7 conj|2 death|0 discrep|2 excl|4 family|0 feel|0 filler|0 friend|0 funct|18 future|0 health|0 hear|0 home|0 humans|1 i|0 incl|0 ingest|0 inhib|0 insight|1 ipron|1 jeopardy|17 leisure|2 money|3 motion|0 negate|0 negative|1 negemo|0 nonfl|0 number|0 past|0 percept|0 posemo|2 positive|2 ppron|2 preps|6 present|3 pronoun|3 quant|1 relativ|1 relig|0 sad|0 satiq|0 see|0 sexual|0 shehe|0 social|4 space|1 swear|0 tentat|1 they|0 time|0 verb|3 we|0 wine|11 work|1 you|2 rating|5.0, A2CX7LUOHB2NDG-0321732944 Dic|99 WC|126 achieve|5 adverb|7 affect|6 anger|2 anx|1 article|7 assent|0 auxverb|8 bio|0 body|0 cause|1 certain|4 ..."},"dateCreated":"Apr 16, 2016 5:12:09 PM","dateStarted":"Apr 16, 2016 5:31:52 PM","dateFinished":"Apr 16, 2016 5:31:54 PM","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:22"},{"text":"val parsedData = data.map { line =>\nval parts = line.split(\" \")\nLabeledPoint(parts(72).split(\"\"\"\\|\"\"\")(1).toDouble, Vectors.dense(parts.slice(3,71).map(x => x.split(\"\"\"\\|\"\"\")(1).toDouble).toArray))\n}\n","dateUpdated":"Apr 17, 2016 7:19:50 PM","config":{"colWidth":12,"graph":{"mode":"table","height":300,"optionOpen":false,"keys":[],"values":[],"groups":[],"scatter":{}},"enabled":true,"editorMode":"ace/mode/scala"},"settings":{"params":{},"forms":{}},"jobName":"paragraph_1460841162248_-468053181","id":"20160416-171242_847322235","result":{"code":"SUCCESS","type":"TEXT","msg":"parsedData: org.apache.spark.rdd.RDD[org.apache.spark.mllib.regression.LabeledPoint] = MapPartitionsRDD[2089] at map at <console>:219\n"},"dateCreated":"Apr 16, 2016 5:12:42 PM","dateStarted":"Apr 17, 2016 7:19:50 PM","dateFinished":"Apr 17, 2016 7:19:51 PM","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:23"},{"text":"//parsedData.collect()\n//PCA\nval pca = new PCA(68).fit(parsedData.map(_.features))\nval projected = parsedData.map(p => p.copy(features = pca.transform(p.features)))","dateUpdated":"Apr 17, 2016 7:19:53 PM","config":{"colWidth":12,"graph":{"mode":"table","height":300,"optionOpen":false,"keys":[],"values":[],"groups":[],"scatter":{}},"enabled":true,"editorMode":"ace/mode/scala"},"settings":{"params":{},"forms":{}},"jobName":"paragraph_1460841533794_121851726","id":"20160416-171853_485254632","result":{"code":"SUCCESS","type":"TEXT","msg":"pca: org.apache.spark.mllib.feature.PCAModel = org.apache.spark.mllib.feature.PCAModel@164185d2\nprojected: org.apache.spark.rdd.RDD[org.apache.spark.mllib.regression.LabeledPoint] = MapPartitionsRDD[2093] at map at <console>:223\n"},"dateCreated":"Apr 16, 2016 5:18:53 PM","dateStarted":"Apr 17, 2016 7:19:53 PM","dateFinished":"Apr 17, 2016 7:19:59 PM","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:24"},{"text":"val splits = projected.randomSplit(Array(0.8, 0.2), seed = 11L)\n\tval training = splits(0).cache()\n\tval test = splits(1).cache()","dateUpdated":"Apr 17, 2016 7:34:21 PM","config":{"colWidth":12,"graph":{"mode":"table","height":300,"optionOpen":false,"keys":[],"values":[],"groups":[],"scatter":{}},"enabled":true,"editorMode":"ace/mode/scala"},"settings":{"params":{},"forms":{}},"jobName":"paragraph_1460841552797_1975803434","id":"20160416-171912_1912680734","result":{"code":"SUCCESS","type":"TEXT","msg":"splits: Array[org.apache.spark.rdd.RDD[org.apache.spark.mllib.regression.LabeledPoint]] = Array(MapPartitionsRDD[3114] at randomSplit at <console>:225, MapPartitionsRDD[3115] at randomSplit at <console>:225)\ntraining: org.apache.spark.rdd.RDD[org.apache.spark.mllib.regression.LabeledPoint] = MapPartitionsRDD[3114] at randomSplit at <console>:225\ntest: org.apache.spark.rdd.RDD[org.apache.spark.mllib.regression.LabeledPoint] = MapPartitionsRDD[3115] at randomSplit at <console>:225\n"},"dateCreated":"Apr 16, 2016 5:19:12 PM","dateStarted":"Apr 17, 2016 7:34:21 PM","dateFinished":"Apr 17, 2016 7:34:22 PM","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:25"},{"text":"%md Regression Models : Choose the algorithm","dateUpdated":"Apr 17, 2016 6:56:39 PM","config":{"colWidth":12,"graph":{"mode":"table","height":300,"optionOpen":false,"keys":[],"values":[],"groups":[],"scatter":{}},"enabled":true,"editorMode":"ace/mode/markdown"},"settings":{"params":{},"forms":{}},"jobName":"paragraph_1460933752341_1218432825","id":"20160417-185552_889940272","result":{"code":"SUCCESS","type":"HTML","msg":"<p>Regression Models : Choose the algorithm</p>\n"},"dateCreated":"Apr 17, 2016 6:55:52 PM","dateStarted":"Apr 17, 2016 6:56:39 PM","dateFinished":"Apr 17, 2016 6:56:39 PM","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:26"},{"text":"\nval algorithm = z.select(\"Algorithm\", Seq((\"LinearRegressionWithSGD_L0\",\"LinearRegressionWithSGD L0\"),\n                                    (\"LinearRegressionWithSGD_L1\",\"LinearRegressionWithSGD L1\"),\n                                    (\"LinearRegressionWithSGD_L2\",\"LinearRegressionWithSGD L2\"),\n                                    (\"Ridge_Regression\",\"Ridge Regression\"),\n                                    (\"Lasso_Regression\",\"Lasso Regression\")))\n","dateUpdated":"Apr 17, 2016 7:54:16 PM","config":{"colWidth":12,"graph":{"mode":"table","height":300,"optionOpen":false,"keys":[],"values":[],"groups":[],"scatter":{}},"enabled":true,"editorMode":"ace/mode/scala"},"settings":{"params":{"Algorithm":"LinearRegressionWithSGD_L1"},"forms":{"Algorithm":{"name":"Algorithm","displayName":"Algorithm","defaultValue":"","options":[{"value":"LinearRegressionWithSGD_L0","displayName":"LinearRegressionWithSGD L0"},{"value":"LinearRegressionWithSGD_L1","displayName":"LinearRegressionWithSGD L1"},{"value":"LinearRegressionWithSGD_L2","displayName":"LinearRegressionWithSGD L2"},{"value":"Ridge_Regression","displayName":"Ridge Regression"},{"value":"Lasso_Regression","displayName":"Lasso Regression"}],"hidden":false}}},"jobName":"paragraph_1460930585091_599079638","id":"20160417-180305_2106370645","result":{"code":"SUCCESS","type":"TEXT","msg":"algorithm: Object = LinearRegressionWithSGD_L1\n"},"dateCreated":"Apr 17, 2016 6:03:05 PM","dateStarted":"Apr 17, 2016 7:54:16 PM","dateFinished":"Apr 17, 2016 7:54:17 PM","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:27"},{"text":"// LinearRegressionWithSGD L0\nif(algorithm == \"LinearRegressionWithSGD_L0\"){\nval lreg = new LinearRegressionWithSGD()\nlreg.optimizer.setNumIterations(100).setStepSize(0.001)\nlreg.setIntercept(true)\nmodel1 = lreg.run(training)\n\n// Training Data Prediction & Score\n val labelAndPreds = training.map { point =>\n    val prediction = model1.predict(point.features)\n    (point.label, prediction)\n    }\n    \nval trainingMetrics = new RegressionMetrics(labelAndPreds)\n// Get evaluation metrics.\nprintln(\"\\nTraining Data:Root Mean Squared Error using LinearRegressionWithSGD with L0 = \" + trainingMetrics.rootMeanSquaredError)    \n\n\n// Test Data Prediction & Score\n val labelAndPredsTest = test.map { point =>\n    val prediction = model1.predict(point.features)\n    (point.label, prediction)\n    }\n    \nval testMetrics = new RegressionMetrics(labelAndPredsTest)\n// Get evaluation metrics.\nprintln(\"\\nTest Data:Root Mean Squared Error using LinearRegressionWithSGD with L0 = \" + testMetrics.rootMeanSquaredError)    \n\n\n} \n\n// LinearRegressionWithSGD L1\nif(algorithm == \"LinearRegressionWithSGD_L1\"){\nval lreg = new LinearRegressionWithSGD()\nlreg.optimizer.setNumIterations(100).setUpdater(new L1Updater).setStepSize(0.001)\nlreg.setIntercept(true)\nval model1 = lreg.run(training)\n \n// Training Data Prediction & Score\n val  labelAndPreds = training.map { point =>\n    val prediction = model1.predict(point.features)\n    (point.label, prediction)\n    } \n    \nval trainingMetrics = new RegressionMetrics(labelAndPreds)\n// Get evaluation metrics.\nprintln(\"\\nTraining Data:Root Mean Squared Error using LinearRegressionWithSGD with L1 = \" + trainingMetrics.rootMeanSquaredError)\n\n\n// Test Data Prediction & Score\n val labelAndPredsTest = test.map { point =>\n    val prediction = model1.predict(point.features)\n    (point.label, prediction)\n    }\n    \nval testMetrics = new RegressionMetrics(labelAndPredsTest)\n// Get evaluation metrics.\nprintln(\"\\nTest Data:Root Mean Squared Error using LinearRegressionWithSGD with L1 = \" + testMetrics.rootMeanSquaredError)    \n\n\n}\n\n// LinearRegressionWithSGD L2\nif(algorithm == \"LinearRegressionWithSGD_L2\"){\nval lreg = new LinearRegressionWithSGD()\nlreg.optimizer.setNumIterations(100).setUpdater(new SquaredL2Updater).setStepSize(0.001)\nlreg.setIntercept(true)\nval model1 = lreg.run(training)\n\n// Training Data Prediction & Score\n val  labelAndPreds = test.map { point =>\n    val prediction = model1.predict(point.features)\n    (point.label, prediction)\n    }\n    \nval trainingMetrics = new RegressionMetrics(labelAndPreds)\n// Get evaluation metrics.\nprintln(\"\\nTraining Data:Root Mean Squared Error using LinearRegressionWithSGD with L2 = \" + trainingMetrics.rootMeanSquaredError)\n\n// Test Data Prediction & Score\n val labelAndPredsTest = test.map { point =>\n    val prediction = model1.predict(point.features)\n    (point.label, prediction)\n    }\n    \nval testMetrics = new RegressionMetrics(labelAndPredsTest)\n// Get evaluation metrics.\nprintln(\"\\nTest Data:Root Mean Squared Error using LinearRegressionWithSGD with L2 = \" + testMetrics.rootMeanSquaredError)    \n\n}\n\n//Ridge Regression\nif(algorithm == \"Ridge_Regression\"){\nval lreg = new RidgeRegressionWithSGD()\nlreg.optimizer.setNumIterations(100).setStepSize(0.001)\nlreg.setIntercept(true)\nval model2 = lreg.run(training)\n \n \n // Training Data Prediction & Score\n val  labelAndPreds = training.map { point =>\n    val prediction = model2.predict(point.features)\n    (point.label, prediction)\n    }\n\nval trainingMetrics = new RegressionMetrics(labelAndPreds)\n// Get evaluation metrics.\nprintln(\"\\nTraining Data:Root Mean Squared Error using Ridge Regression = \" + trainingMetrics.rootMeanSquaredError)\n\n// Test Data Prediction & Score\n val labelAndPredsTest = test.map { point =>\n    val prediction = model2.predict(point.features)\n    (point.label, prediction)\n    }\n    \nval testMetrics = new RegressionMetrics(labelAndPredsTest)\n// Get evaluation metrics.\nprintln(\"\\nTest Data:Root Mean Squared Error using Ridge Regression = \" + testMetrics.rootMeanSquaredError)    \n\n\n}\n\n//Lasso Regression\nif(algorithm == \"Lasso_Regression\"){\nval lreg = new LassoWithSGD()\nlreg.optimizer.setNumIterations(100).setStepSize(0.001)\nlreg.setIntercept(true)\nval model3 = lreg.run(training)\n  \n  // Training Data Prediction & Score\n val labelAndPreds = training.map { point =>\n    val prediction = model3.predict(point.features)\n    (point.label, prediction)\n    }\n    \nval trainingMetrics = new RegressionMetrics(labelAndPreds)\n// Get evaluation metrics.\nprintln(\"\\nTraining Data:Root Mean Squared Error using Lasso Regression = \" + trainingMetrics.rootMeanSquaredError)\n\n\n// Test Data Prediction & Score\n val labelAndPredsTest = test.map { point =>\n    val prediction = model3.predict(point.features)\n    (point.label, prediction)\n    }\n    \nval testMetrics = new RegressionMetrics(labelAndPredsTest)\n// Get evaluation metrics.\nprintln(\"\\nTest Data:Root Mean Squared Error using Ridge Regression = \" + testMetrics.rootMeanSquaredError)    \n\n\n}\n\n","dateUpdated":"Apr 17, 2016 7:54:21 PM","config":{"colWidth":12,"graph":{"mode":"table","height":300,"optionOpen":false,"keys":[],"values":[],"groups":[],"scatter":{}},"enabled":true,"editorMode":"ace/mode/scala"},"settings":{"params":{},"forms":{}},"jobName":"paragraph_1460842152921_1464361588","id":"20160416-172912_1106606736","result":{"code":"SUCCESS","type":"TEXT","msg":"\nTraining Data:Root Mean Squared Error using LinearRegressionWithSGD with L1 = 7.508251957081475E12\n\nTest Data:Root Mean Squared Error using LinearRegressionWithSGD with L1 = 7.391930079159019E12\n"},"dateCreated":"Apr 16, 2016 5:29:12 PM","dateStarted":"Apr 17, 2016 7:54:21 PM","dateFinished":"Apr 17, 2016 7:54:44 PM","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:28"},{"dateUpdated":"Apr 16, 2016 5:31:47 PM","config":{"colWidth":12,"graph":{"mode":"table","height":300,"optionOpen":false,"keys":[],"values":[],"groups":[],"scatter":{}},"enabled":true,"editorMode":"ace/mode/scala"},"settings":{"params":{},"forms":{}},"jobName":"paragraph_1460842253035_1858683238","id":"20160416-173053_666904373","result":{"code":"SUCCESS","type":"TEXT"},"dateCreated":"Apr 16, 2016 5:30:53 PM","dateStarted":"Apr 16, 2016 5:32:05 PM","dateFinished":"Apr 16, 2016 5:32:05 PM","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:29"}],"name":"Zeppelin-ML","id":"2BJ9MEMQS","angularObjects":{"2BG8BPDP9":[],"2BHNAV395":[],"2BGSFZYEE":[],"2BJX6426Q":[],"2BFSKPM5X":[],"2BJKHGQ3R":[],"2BHZQM1U7":[],"2BFX6W7GN":[],"2BJP5JC8X":[],"2BFZMKZSA":[],"2BH8UF92D":[],"2BG97XDQR":[],"2BHS1DUDZ":[],"2BJ1GKVSW":[]},"config":{"looknfeel":"default"},"info":{}}